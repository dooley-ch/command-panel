;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     <File Name>                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 00-00-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     00-00-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════

XIncludeFile "command-panel-data.pbi"

DeclareModule CommandPanelGadgetUI
  
  UseModule CommandPanelData
  
  Declare.i CommandPanelGadget(*cfg.cpConfiguration)                        ; Creates an instance of the Gadget
  Declare.b ClearCommandPanelSelection(panelIndex.i)                        ; Clear's the panel selection, if any
  
  Declare.i AddCmpPanelItem(*cfg.cpItemConfiguration, isBatch.b = #False)   ; Adds an item to a given panel
  Declare.b DisableCmpPanelItem(index.i, disable.b = #True)                 ; Disables or enables an item
  Declare.b SelectCmpPanelItem(index.i)                                     ; Select item
  Declare.s LastErrorCommandPanelGadgetUI()                                 ; Returns last error generated by the module

EndDeclareModule

Module CommandPanelGadgetUI
  EnableExplicit

  ;────────────────────────────────────────────────────────────────────────────────────────────────
  ;      Module constants, structures & variables 
  
  Structure ItemImageConfig
    BackColour.i
    Width.i
    Height.i
    Border.b
    BorderColour.i
    ImageNO.i
    Caption$
    FontName$
    FontSize.i
    FontColour.i
  EndStructure
  
  #DefaultCmdPanel_X = 50
  #DefaultCmdPanel_Y = 50
  #DefaultCmdPanel_Width = 150
  #DefaultCmdPanel_Height = 300
  
  #ItemSidePadding = 10
  #InterItemPadding = 6
  #ItemHeight = 30
  
  Define _lastErrorMessage$ = #Empty$ ; Holds the last error generated by the module
  
  ;────────────────────────────────────────────────────────────────────────────────────────────────
  ;      Support Routines 
  
  Procedure _ResetLastErrorMessage()
    Shared _lastErrorMessage$
    
    _lastErrorMessage$ = #Empty$
  EndProcedure
  
  Procedure _DrawCommandPanelBorders(panelNO.i, borders.b, width.i, colour.i, backColour.i)
    SetGadgetColor(panelNO, #PB_Gadget_BackColor, backColour)
    
    Protected locX1.i, locX2.i, 
              locY1.i, locY2.i,
              gWidth.i = DesktopScaledX(GadgetWidth(panelNO)),
              gHeight.i = DesktopScaledY(GadgetHeight(panelNO)),
              j.i
    
    StartDrawing(CanvasOutput(panelNO))
    
      If borders & CommandPanelData::#CP_TopBorder
        locX1 = 0
        locX2 = gWidth
        
        For j = 0 To width - 1
          locY1 = j
          locY2 = locY1
          
          LineXY(locX1, locY1, locX2, locY2, colour)
        Next j      
      EndIf
      
      If borders & CommandPanelData::#CP_BottomBorder
        locX1 = 0
        locX2 = gWidth
        
        For j = 1 To width
          locY1 = gHeight - j
          locY2 = locY1
          
          LineXY(locX1, locY1, locX2, locY2, colour)
        Next j      
      EndIf        
      
      If borders & CommandPanelData::#CP_LeftBorder
        locY1 = 0
        locY2 = gHeight
        
        For j = 0 To width - 1
          locX1 = j
          locX2 = locX1
          
          LineXY(locX1, locY1, locX2, locY2, colour)
        Next j
      EndIf        
      
      If borders & CommandPanelData::#CP_RightBorder
        locY1 = 0
        locY2 = gHeight
        
        For j = 1 To width
          locX1 = gWidth - j
          locX2 = locX1
          
          LineXY(locX1, locY1, locX2, locY2, colour)
        Next j
      EndIf  
      
    StopDrawing()
  EndProcedure
  
  Declare _OnClickItem()
  Declare _OnItemEnter()
  Declare _OnItemExit()
  Declare.b _IsValidImage(imageNO.i, width.i, height.i)
  Declare.i _CreateItemImage(*cfg.ItemImageConfig)
    
  Procedure _DisplayCmdPanelItems(panelIndex.i)
    _ResetLastErrorMessage()
    Shared _lastErrorMessage$
    
    Protected panelNO.i, itemNO.i,
              NewList items.CommandPanelData::cpItemConfigurationEx(),
              itemCfg.ItemImageConfig,
              panelWidth.i, itemWidth.i, locX.i, locY.i
    
    panelNO = CommandPanelData::CommandPanelNO(panelIndex)
    
    If IsGadget(panelNO)
      panelWidth = GadgetWidth(panelNO) 
      itemWidth = panelWidth - (#ItemSidePadding * 2)
      locX = #ItemSidePadding
      locY = #ItemSidePadding
      
      CommandPanelData::FindCmdPanelItemsByCmd(panelIndex, items())
      
      ResetList(items())
      
      ; Clear the list
      ForEach items()
        If IsGadget(items()\GadgetNO)
          FreeGadget(items()\GadgetNO)
          items()\GadgetNO = #Null
        EndIf        
      Next
        
      ; Draw the new list
      ResetList(items())
      
      OpenGadgetList(panelNO)
      ForEach items()
        ; Delete item if in deleted state
        If items()\State = CommandPanelData::#CP_DeletedItem
          CommandPanelData::DeleteCmdPanelItem(items()\Index)
          Continue  
        EndIf
        
        ; Draw the item
        itemNO = CanvasGadget(#PB_Any, locX, locY, itemWidth, #ItemHeight)
        
        Select items()\State
          Case CommandPanelData::#CP_NormalItem
            If Not _IsValidImage(items()\Images\Normal, itemWidth, #ItemHeight)
              itemCfg\Width = itemWidth
              itemCfg\Height = #ItemHeight
              itemCfg\BackColour = items()\Colours\Normal
              itemCfg\Border = items()\Border
              itemCfg\BorderColour = items()\BorderColour
              itemCfg\ImageNO = items()\Icons\Normal
              itemCfg\Caption$ = items()\Caption$
              itemCfg\FontName$ = items()\Font\Name$
              itemCfg\FontSize = items()\Font\Size
              itemCfg\FontColour = items()\Font\Colours\Normal
              
              items()\Images\Normal = _CreateItemImage(@itemCfg)
            EndIf
            SetGadgetAttribute(itemNO, #PB_Canvas_Image, ImageID(items()\Images\Normal))
            
          Case CommandPanelData::#CP_SelectedItem
            SetGadgetColor(itemNO, #PB_Gadget_BackColor, items()\Colours\Selected)

          Case CommandPanelData::#CP_HoverItem
            SetGadgetColor(itemNO, #PB_Gadget_BackColor, items()\Colours\Hover)
            
          Case CommandPanelData::#CP_DisabledItem
            SetGadgetColor(itemNO, #PB_Gadget_BackColor, items()\Colours\Disabled)
            
        EndSelect
        
        locY = locY + #InterItemPadding + #ItemHeight
        
        ; Update the item PB number & store the index
        CommandPanelData::SetCmdPanelItemNO(items()\Index, itemNO)
        SetGadgetData(itemNO, items()\Index)
        
        ; Bind the events
        BindGadgetEvent(itemNO, @_OnClickItem(), #PB_EventType_LeftClick)
        BindGadgetEvent(itemNO, @_OnItemEnter(), #PB_EventType_MouseEnter)
        BindGadgetEvent(itemNO, @_OnItemExit(), #PB_EventType_MouseLeave)
        
        ; Set the mouse pointer
        If items()\State = #CP_DisabledItem
          SetGadgetAttribute(itemNO, #PB_Canvas_Cursor, #PB_Cursor_Denied)
        Else
          SetGadgetAttribute(itemNO, #PB_Canvas_Cursor, #PB_Cursor_Hand)
        EndIf
      Next      
      CloseGadgetList()
      
    EndIf
    
    _lastErrorMessage$ = "Invalid Command Panel index gadget returned"
  EndProcedure
  
  Procedure.b _IsValidImage(imageNO.i, width.i, height.i)
    Protected imgWidth, imgHeight, imgWidthReq, imgHeightReq
    
    If Not IsImage(imageNO)
      ProcedureReturn #False
    EndIf
    
    imgWidth = ImageWidth(imageNO)
    imgHeight = ImageHeight(imageNO)
    
    imgWidthReq = DesktopScaledX(width)
    imgHeightReq = DesktopScaledY(height)
    
    If imgWidth <> imgWidthReq
      ProcedureReturn #False
    EndIf
    
    If imgHeight <> imgHeightReq
      ProcedureReturn #False
    EndIf    
    
    ProcedureReturn #True
  EndProcedure
  
  Procedure.i _CreateItemImage(*cfg.ItemImageConfig)
    #ImagePadding = 5
    #CaptionPadding = 12
    
    Protected FontNO.i, imgNO.i, imgCopyNO.i, width.i, height.i, 
              locX.i = #ImagePadding, locY.i = #ImagePadding,
              imageSize.i
    
    If *cfg\Caption$ <> #Null$
      FontNO = LoadFont(#PB_Any, *cfg\FontName$, *cfg\FontSize, #PB_Font_Bold | #PB_Font_HighQuality)
    EndIf
    
    width = DesktopScaledX(*cfg\Width)
    height = DesktopScaledY(*cfg\Height)
    
    imgNO = CreateImage(#PB_Any, width, height, 32, *cfg\BackColour)
    
      StartDrawing(ImageOutput(imgNO))
        ; Draw a border if required
        If *cfg\Border
          DrawingMode(#PB_2DDrawing_Outlined)
          Box(0, 0, width, height, *cfg\BackColour)
          Box(1, 1, width - 2, height - 2, *cfg\BorderColour)
          
          locX = locX + 3
          locY = locY + 3
        EndIf
        
        ; Draw the icon
        If IsImage(*cfg\ImageNO)
          imageSize = height - (locY * 2)
          
          imgCopyNO = CopyImage(*cfg\ImageNO, #PB_Any)
          ResizeImage(imgCopyNO, imageSize, imageSize)
          
          DrawingMode(#PB_2DDrawing_AlphaBlend)
          DrawImage(ImageID(imgCopyNO), locX, locY) ;, imageSize, imageSize) 
          
          locX = locX + imageSize + #CaptionPadding
        EndIf
        
        ; Draw Capition
        If *cfg\Caption$ <> #Null$
          DrawingMode(#PB_2DDrawing_Transparent | #PB_2DDrawing_NativeText)
          DrawingFont(FontID(FontNO))
          FrontColor(*cfg\FontColour)
          
          locY = (height - TextHeight(*cfg\Caption$)) / 2
          
          DrawText(locX, locY, *cfg\Caption$)
        EndIf
      StopDrawing()
      
      If IsFont(FontNO)          
        FreeFont(FontNO)
      EndIf
      
    ProcedureReturn imgNO
  EndProcedure
  
  ;────────────────────────────────────────────────────────────────────────────────────────────────
  ;      Event handlers 
  
  Procedure _OnResizePanel()
    Protected gadgetNO.i = EventGadget(),
              index.i = GetGadgetData(gadgetNO),
              cfg.cpConfigurationEx
    
    If CommandPanelData::FindCmdPanelRecord(index, @cfg)
      _DrawCommandPanelBorders(cfg\GadgetNO, cfg\Borders\Sides, 
                         cfg\Borders\Width, cfg\Borders\Colour, 
                         cfg\BackColour)
    EndIf
  EndProcedure
  
  Procedure _OnClickItem()
    Protected index.i, 
              cfg.CommandPanelData::cpItemConfigurationEx,
              panelCfg.CommandPanelData::cpConfigurationEx,
              gadgetNO.i = EventGadget()
    
    If IsGadget(gadgetNO)
      index = GetGadgetData(gadgetNO)
      If CommandPanelData::FindCmdPanelItemRecord(index, @cfg)
        If cfg\State = CommandPanelData::#CP_DisabledItem
          ProcedureReturn ; Item is disabled so don't execute the func
        EndIf
        
        If CommandPanelData::FindCmdPanelRecord(cfg\PanelIndex, @panelCfg)
          If panelCfg\IsToggle
            ClearCommandPanelSelection(cfg\PanelIndex)
            SelectCmpPanelItem(index)
          EndIf
          
          If panelCfg\IsToggle And cfg\State = CommandPanelData::#CP_SelectedItem
            ProcedureReturn ; Already executed so nothing to do
          EndIf
        EndIf
        
         If cfg\CallBackFunc
          cfg\CallBackFunc(index)
        EndIf
      EndIf
    EndIf
  EndProcedure
  
  Procedure _OnItemEnter()
    Protected index.i, cfg.CommandPanelData::cpItemConfigurationEx,
              panelNO.i, gadgetNO.i = EventGadget(),
              panelWidth.i, itemWidth.i,
              itemCfg.ItemImageConfig
    
    If IsGadget(gadgetNO)
      index = GetGadgetData(gadgetNO)
      If CommandPanelData::FindCmdPanelItemRecord(index, @cfg)
        If cfg\State = CommandPanelData::#CP_NormalItem
          panelNO = CommandPanelData::CommandPanelNO(cfg\PanelIndex)
          
          If IsGadget(panelNO)
            panelWidth = GadgetWidth(panelNO)
            itemWidth = panelWidth - (#ItemSidePadding * 2)
            
            If Not _IsValidImage(cfg\Images\Hover, itemWidth, #ItemHeight)
              itemCfg\Width = itemWidth
              itemCfg\Height = #ItemHeight
              itemCfg\BackColour = cfg\Colours\Hover
              itemCfg\Border = cfg\Border
              itemCfg\BorderColour = cfg\BorderColour
              itemCfg\ImageNO = cfg\Icons\Hover
              itemCfg\Caption$ = cfg\Caption$
              itemCfg\FontName$ = cfg\Font\Name$
              itemCfg\FontSize = cfg\Font\Size
              itemCfg\FontColour = cfg\Font\Colours\Normal
              
              cfg\Images\Hover = _CreateItemImage(@itemCfg)
            EndIf
            
            SetGadgetAttribute(gadgetNO, #PB_Canvas_Image, ImageID(cfg\Images\Hover))
          EndIf
   
        EndIf
      EndIf
    EndIf
  EndProcedure
  
  Procedure _OnItemExit()
    Protected index.i, cfg.CommandPanelData::cpItemConfigurationEx,
              panelNO.i, gadgetNO.i = EventGadget(),
              panelWidth.i, itemWidth.i,
              itemCfg.ItemImageConfig
    
    If IsGadget(gadgetNO)
      index = GetGadgetData(gadgetNO)
      If CommandPanelData::FindCmdPanelItemRecord(index, @cfg)
        If cfg\State = CommandPanelData::#CP_NormalItem
          panelNO = CommandPanelData::CommandPanelNO(cfg\PanelIndex)
          
          If IsGadget(panelNO)
            panelWidth = GadgetWidth(panelNO)
            itemWidth = panelWidth - (#ItemSidePadding * 2)
            
            If Not _IsValidImage(cfg\Images\Normal, itemWidth, #ItemHeight)
              itemCfg\Width = itemWidth
              itemCfg\Height = #ItemHeight
              itemCfg\BackColour = cfg\Colours\Normal
              itemCfg\Border = cfg\Border
              itemCfg\BorderColour = cfg\BorderColour
              itemCfg\ImageNO = cfg\Icons\Normal
              itemCfg\Caption$ = cfg\Caption$
              itemCfg\FontName$ = cfg\Font\Name$
              itemCfg\FontSize = cfg\Font\Size
              itemCfg\FontColour = cfg\Font\Colours\Normal
              
              cfg\Images\Normal = _CreateItemImage(@itemCfg)
            EndIf
            
            SetGadgetAttribute(gadgetNO, #PB_Canvas_Image, ImageID(cfg\Images\Normal))
          EndIf
   
        EndIf
      EndIf
    EndIf
  EndProcedure
    
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the module
  Procedure.s LastErrorCommandPanelGadgetUI()
    Shared _lastErrorMessage$
  
    ProcedureReturn _lastErrorMessage$
  EndProcedure
  
  ; Creates an instance of the Gadget
  ;
  ; Params
  ;   *cfg - The data needed to create the CommandPanel
  ;
  ; Return
  ;   The index of the newly created control
  ;
  Procedure.i CommandPanelGadget(*cfg.cpConfiguration) 
    Protected index.i = CommandPanelData::AddCmdPanelRecord(*cfg)
    Protected NO.i
    
    NO = CanvasGadget(#PB_Any,#DefaultCmdPanel_X, #DefaultCmdPanel_Y, *cfg\Width, 
                      #DefaultCmdPanel_Height, #PB_Canvas_Container)
    CloseGadgetList()
    
    SetGadgetData(NO, index)
    BindGadgetEvent(NO, @_OnResizePanel(), #PB_EventType_Resize)
    SetGadgetColor(NO, #PB_Gadget_BackColor, *cfg\BackColour)
    
    CommandPanelData::SetCommandPanelNO(index, NO)
    ProcedureReturn index
  EndProcedure
  
  ; Adds an item to a given panel
  ;
  ; Params
  ;   *cfg - The definition of the item to add
  ;   isBatch - Flag to indicate a batch load
  ;
  ; Retirm
  ;   Returns the index of the newly added item
  ;
  Procedure.i AddCmpPanelItem(*cfg.cpItemConfiguration, isBatch.b = #False)
    Protected index.i = CommandPanelData::AddCmdPanelItemRecord(*cfg) 
    
    If Not isBatch
      _DisplayCmdPanelItems(*cfg\PanelIndex)
    EndIf
    
    ProcedureReturn index
  EndProcedure
  
  ; Disables or enables an item
  ;
  ; Params
  ;   index - The index of the item tup disable/enable
  ;   disable - True to disable, otherwise False
  ;
  ; Return
  ;   True if the request succeeds otherwise false
  ;
  Procedure.b DisableCmpPanelItem(index.i, disable.b = #True)
    Protected cfg.cpItemConfigurationEx,
              itemCfg.ItemImageConfig,
              panelNO.i, panelWidth.i, itemWidth.i,
              itemImageNO.i
    
    If disable
      CommandPanelData::SetCmdPanelItemState(index, CommandPanelData::#CP_DisabledItem)
    Else
      CommandPanelData::SetCmdPanelItemState(index, CommandPanelData::#CP_NormalItem)
    EndIf
    
    If CommandPanelData::FindCmdPanelItemRecord(index, @cfg)
      panelNO = CommandPanelData::CommandPanelNO(cfg\PanelIndex)
      panelWidth = GadgetWidth(panelNO)
      itemWidth = panelWidth - (#ItemSidePadding * 2)
      
      If cfg\State = CommandPanelData::#CP_DisabledItem
        itemCfg\Width = itemWidth
        itemCfg\Height = #ItemHeight
        itemCfg\BackColour = cfg\Colours\Disabled
        itemCfg\Border = cfg\Border
        itemCfg\BorderColour = cfg\BorderColour
        itemCfg\ImageNO = cfg\Icons\Disabled
        itemCfg\Caption$ = cfg\Caption$
        itemCfg\FontName$ = cfg\Font\Name$
        itemCfg\FontSize = cfg\Font\Size
        itemCfg\FontColour = cfg\Font\Colours\Disabled
        
        itemImageNO = _CreateItemImage(@itemCfg)
        SetGadgetAttribute(cfg\GadgetNO, #PB_Canvas_Cursor, #PB_Cursor_Denied)
      EndIf
      
      If cfg\State = CommandPanelData::#CP_NormalItem
        itemCfg\Width = itemWidth
        itemCfg\Height = #ItemHeight
        itemCfg\BackColour = cfg\Colours\Normal
        itemCfg\Border = cfg\Border
        itemCfg\BorderColour = cfg\BorderColour
        itemCfg\ImageNO = cfg\Icons\Normal
        itemCfg\Caption$ = cfg\Caption$
        itemCfg\FontName$ = cfg\Font\Name$
        itemCfg\FontSize = cfg\Font\Size
        itemCfg\FontColour = cfg\Font\Colours\Normal
        
        itemImageNO = _CreateItemImage(@itemCfg)
        SetGadgetAttribute(cfg\GadgetNO, #PB_Canvas_Cursor, #PB_Cursor_Hand)
      EndIf  
      
      SetGadgetAttribute(cfg\GadgetNO, #PB_Canvas_Image, ImageID(itemImageNO))
      ProcedureReturn #True
    EndIf
    
    ProcedureReturn #False
  EndProcedure
  
  ; Select item
  ;
  ; Params
  ;   index - Panel index
  ;   selected - flag
  ;
  ; Returns
  ;   True if successful otherwise False
  ;
  Procedure.b SelectCmpPanelItem(index.i) 
    Protected itemCfg.cpItemConfigurationEx,
              imgCfg.ItemImageConfig,
              imgNO.i, panelNO.i, panelWidth.i, itemWidth.i
    
    If CommandPanelData::FindCmdPanelItemRecord(index, @itemCfg)
      CommandPanelData::SetCmdPanelItemState(index, CommandPanelData::#CP_SelectedItem)
      CommandPanelData::SetCommandPanelSelected(itemCfg\PanelIndex, index)
      
      panelNO = CommandPanelData::CommandPanelNO(itemCfg\PanelIndex)
      panelWidth = GadgetWidth(panelNO)
      itemWidth = panelWidth - (#ItemSidePadding * 2)
      
      imgCfg\Width = itemWidth
      imgCfg\Height = #ItemHeight
      imgCfg\BackColour = itemCfg\Colours\Selected
      imgCfg\Border = itemCfg\Border
      imgCfg\BorderColour = itemCfg\BorderColour
      imgCfg\ImageNO = itemCfg\Icons\Selected
      imgCfg\Caption$ = itemCfg\Caption$
      imgCfg\FontName$ = itemCfg\Font\Name$
      imgCfg\FontSize = itemCfg\Font\Size
      imgCfg\FontColour = itemCfg\Font\Colours\Selected
      
      imgNO = _CreateItemImage(@imgCfg)
      
      SetGadgetAttribute(itemCfg\GadgetNO, #PB_Canvas_Image, ImageID(imgNO))
      
      ProcedureReturn #True
    EndIf
    
    ProcedureReturn #False
  EndProcedure
  
  ; Clear's the panel selection, if any
  ;
  ; Params
  ;   panelIndex - CommandPanel to clear
  ;
  ; Return
  ;   True if successful, otherwise false
  ;
  Procedure.b ClearCommandPanelSelection(panelIndex.i)  
    Protected cfgPanel.CommandPanelData::cpConfigurationEx,
              itemCfg.cpItemConfigurationEx,
              imgCfg.ItemImageConfig,
              imgNO.i, panelNO.i, panelWidth.i, itemWidth.i
    
    If CommandPanelData::FindCmdPanelRecord(panelIndex, @cfgPanel)
      If cfgPanel\Selected
        If CommandPanelData::FindCmdPanelItemRecord(cfgPanel\Selected, @itemCfg)
          panelNO = CommandPanelData::CommandPanelNO(panelIndex)
          panelWidth = GadgetWidth(cfgPanel\GadgetNO)
          itemWidth = panelWidth - (#ItemSidePadding * 2)
          
          imgCfg\Width = itemWidth
          imgCfg\Height = #ItemHeight
          imgCfg\BackColour = itemCfg\Colours\Normal
          imgCfg\Border = itemCfg\Border
          imgCfg\BorderColour = itemCfg\BorderColour
          imgCfg\ImageNO = itemCfg\Icons\Normal
          imgCfg\Caption$ = itemCfg\Caption$
          imgCfg\FontName$ = itemCfg\Font\Name$
          imgCfg\FontSize = itemCfg\Font\Size
          imgCfg\FontColour = itemCfg\Font\Colours\Normal
          
          imgNO = _CreateItemImage(@imgCfg)
          
          SetGadgetAttribute(itemCfg\GadgetNO, #PB_Canvas_Image, ImageID(imgNO))
          
          CommandPanelData::SetCmdPanelItemState(cfgPanel\Selected, CommandPanelData::#CP_NormalItem)
          CommandPanelData::SetCommandPanelSelected(panelIndex, 0)
          ProcedureReturn #True
        EndIf
      EndIf
    EndIf
    
    ProcedureReturn #False
  EndProcedure
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 350
; Folding = ---
; EnableXP
; DPIAware